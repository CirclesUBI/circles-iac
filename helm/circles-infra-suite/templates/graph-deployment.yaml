apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -o circles-infra-suite --volumes hostPath -c
    kompose.version: 1.21.0 (992df58d8)
  creationTimestamp: null
  labels:
    io.kompose.service: graph
  name: graph
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: graph
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o circles-infra-suite --volumes hostPath -c
        kompose.version: 1.21.0 (992df58d8)
      creationTimestamp: null
      labels:
        io.kompose.service: graph
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: pool
                operator: In
                values:
                - b            
      containers:
      - env:
        - name: ipfs
          valueFrom:
            configMapKeyRef:
              key: ipfs
              name: env
        - name: postgres_host
          valueFrom:
            configMapKeyRef:
              key: postgres_host
              name: env
        - name: postgres_db
          valueFrom:
            configMapKeyRef:
              key: postgres_db
              name: env
        - name: postgres_pass
          valueFrom:
            configMapKeyRef:
              key: postgres_pass
              name: env
        - name: postgres_user
          valueFrom:
            configMapKeyRef:
              key: postgres_user
              name: env
        - name: postgres_port
          valueFrom:
            configMapKeyRef:
              key: postgres_port
              name: env
        - name: ethereum
          valueFrom:
            configMapKeyRef:
              key: ethereum
              name: env
        image: graphprotocol/graph-node:v0.19.2
        name: circles-graph-node
        ports:
        - containerPort: 8000
        - containerPort: 8001
        - containerPort: 8020
        - containerPort: 8030
        - containerPort: 8040
        resources: {}
      restartPolicy: Always
      volumes: null
status: {}
