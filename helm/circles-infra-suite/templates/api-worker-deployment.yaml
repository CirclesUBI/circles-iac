{{- if .Values.apiService.worker.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: {{.Values.apiService.name}}-worker
  name: {{.Values.apiService.name}}-worker
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      io.kompose.service: {{.Values.apiService.name}}-worker
  template:
    metadata:
      labels:
        io.kompose.service: {{.Values.apiService.name}}-worker
    spec:
      imagePullSecrets:
        - name: circles-registry 
      restartPolicy: Always
      volumes:
        - name: {{.Values.apiService.volumeName}}
          persistentVolumeClaim:
            claimName: {{.Values.apiService.volumeClaimName}}
      containers:
        - name: circles-{{.Values.apiService.name}}-worker
          image: {{.Values.imageRegistry}}/{{.Values.apiService.image}}:{{.Values.apiService.imageTag}}
          volumeMounts:
            - mountPath: {{.Values.apiService.volumeMountPath}}
              name: {{.Values.apiService.volumeName}}
          args:
            - ./run-worker.sh
          env:
            # Node Environment
            # ~~~~~~~~~~~~~~~~
            - name: NODE_ENV
              value: production

            # Relayer Addresses
            # ~~~~~~~~~~~~~~~~~
            - name: SAFE_TX_ADDRESS
              valueFrom:
                configMapKeyRef:
                  key: SAFE_TX_ADDRESS
                  name: env

            # Redis service
            # ~~~~~~~~~~~~~
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  key: REDIS_URL
                  name: env

            # Service endpoints
            # ~~~~~~~~~~~~~~~~~
            - name: API_SERVICE_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: API_SERVICE_ENDPOINT
                  name: env
            - name: RELAY_SERVICE_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: RELAY_SERVICE_ENDPOINT
                  name: env
            - name: PATHFINDER_SERVICE_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: PATHFINDER_SERVICE_ENDPOINT
                  name: env

            # "The Graph" Configuration
            # ~~~~~~~~~~~~~~~~~~~~~~~~~
            - name: GRAPH_NODE_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: GRAPH_NODE_ENDPOINT
                  name: env
            - name: SUBGRAPH_NAME
              valueFrom:
                configMapKeyRef:
                  key: SUBGRAPH_NAME
                  name: env

            # AWS S3 Configuration
            # ~~~~~~~~~~~~~~~~~~~~
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: AWS_ACCESS_KEY_ID
                  name: aws
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: AWS_SECRET_ACCESS_KEY
                  name: aws
            # ~~~~~~~~~~~~~~~~~~~~
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  key: AWS_REGION
                  name: env
            - name: AWS_S3_BUCKET_TRUST_NETWORK
              valueFrom:
                configMapKeyRef:
                  key: AWS_S3_BUCKET_TRUST_NETWORK
                  name: env

            # Ethereum Node Configuration
            # ~~~~~~~~~~~~~~~~~~~~~~~~~~~
            - name: ETHEREUM_NODE_WS
              valueFrom:
                secretKeyRef:
                  key: ETHEREUM_NODE_WS
                  name: ethereumnode

            # Smart Contract Addresses
            # ~~~~~~~~~~~~~~~~~~~~~~~~
            - name: HUB_ADDRESS
              valueFrom:
                configMapKeyRef:
                  key: HUB_ADDRESS
                  name: env
            - name: PROXY_FACTORY_ADDRESS
              valueFrom:
                configMapKeyRef:
                  key: PROXY_FACTORY_ADDRESS
                  name: env
            - name: SAFE_ADDRESS
              valueFrom:
                configMapKeyRef:
                  key: SAFE_ADDRESS
                  name: env
            - name: SAFE_DEFAULT_CALLBACK_HANDLER
              valueFrom:
                configMapKeyRef:
                  key: SAFE_DEFAULT_CALLBACK_HANDLER
                  name: env 

            # PostgreSQL Databases
            # ~~~~~~~~~~~~~~~~~~~~
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_HOST
                  name: db
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: db
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_PORT
                  name: db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: POSTGRES_USER
                  name: db
            # ~~~~~~~~~~~~~~~~~~~~
            - name: POSTGRES_USE_SSL
              value: "1"
            - name: POSTGRES_DATABASE_API
              valueFrom:
                configMapKeyRef:
                  key: POSTGRES_DATABASE_API
                  name: env
            # Indexed Data Configuration
            # ~~~~~~~~~~~~~~~~~~~~
            - name: DATABASE_SOURCE
              valueFrom:
                configMapKeyRef:
                  key: DATABASE_SOURCE
                  name: env
            # Api timeout Configuration
            # ~~~~~~~~~~~~~~~~~~~~
            - name: TRANSFER_STEPS_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  key: TRANSFER_STEPS_TIMEOUT
                  name: env
{{- end  -}}